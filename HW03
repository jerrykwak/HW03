#include <iostream>
#include <algorithm>

using namespace std;

template <typename T>
class SimpleVector
{
private:
	T* data;
	int currentSize;
	int currentCapacity;

	void release()
	{
		delete[] data;
		data = nullptr;
	}

public:
	SimpleVector()
	{
		data = new T[10];
		currentSize = 0;
		currentCapacity = 10;
	}

	SimpleVector(int capacity)
	{
		data = new T[capacity];
		currentSize = 0;
		currentCapacity = capacity;
	}

	SimpleVector(const SimpleVector& other)
	{
		currentSize = other.currentSize;
		currentCapacity = other.currentCapacity;
		
		data = new T[currentCapacity];

		for (int i = 0; i < currentSize; i++)
		{
			data[i] = other.data[i];
		}
	}

	~SimpleVector()
	{
		release();
	}

	T& operator[](int index)
	{
		return data[index];
	}

	void resize(int capacity)
	{
		if (currentCapacity > capacity)
		{
			return;
		}

		T* tempData = new T[capacity];

		for (int i = 0; i < currentSize; i++)
		{
			tempData[i] = data[i];
		}

		release();

		currentCapacity = capacity;
		data = tempData;	
	}

	void push_back(const T& value)
	{
		if (currentSize >= currentCapacity)
		{
			resize(currentCapacity + 5);
		}

		data[currentSize] = value;
		++currentSize;
	}

	void sortData()
	{
		sort(data, data + currentSize);
	}

	void pop_back()
	{
		--currentSize;
	}
	
	int size() const
	{
		return currentSize;
	}

	int capacity() const
	{
		return currentCapacity;
	}
};
